"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = curriedGroupBy;

var _awaitAsyncGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/awaitAsyncGenerator"));

var _wrapAsyncGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapAsyncGenerator"));

var _asyncIter = _interopRequireDefault(require("./async-iter"));

function groupBy(_x, _x2) {
  return _groupBy.apply(this, arguments);
}

function _groupBy() {
  _groupBy = (0, _wrapAsyncGenerator2.default)(function* (key, iterable) {
    key = key || function (key) {
      return key;
    };

    iterable = (0, _asyncIter.default)(iterable);
    let currentItem;
    let currentKey, previousKey;

    function group() {
      return _group.apply(this, arguments);
    }

    function _group() {
      _group = (0, _wrapAsyncGenerator2.default)(function* () {
        while (true) {
          yield currentItem.value;
          currentItem = yield (0, _awaitAsyncGenerator2.default)(iterable.next());
          if (currentItem.done) return;
          currentKey = key(currentItem.value);

          if (previousKey !== currentKey) {
            return;
          }
        }
      });
      return _group.apply(this, arguments);
    }

    ;
    currentItem = yield (0, _awaitAsyncGenerator2.default)(iterable.next());

    while (true) {
      if (currentItem.done) return;
      currentKey = key(currentItem.value);

      if (previousKey !== currentKey) {
        previousKey = currentKey;
        yield [currentKey, group()];
      } else {
        currentItem = yield (0, _awaitAsyncGenerator2.default)(iterable.next());
      }
    }
  });
  return _groupBy.apply(this, arguments);
}

function curriedGroupBy(key, iterable) {
  if (typeof iterable === 'undefined') {
    return iterable => groupBy(key, iterable);
  }

  return groupBy(key, iterable);
}

module.exports = exports["default"];