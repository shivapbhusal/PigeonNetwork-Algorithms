import _awaitAsyncGenerator from "@babel/runtime/helpers/awaitAsyncGenerator";
import _wrapAsyncGenerator from "@babel/runtime/helpers/wrapAsyncGenerator";
import _asyncIterator from "@babel/runtime/helpers/asyncIterator";
import asyncIter from './async-iter';

function takeWhile(_x, _x2) {
  return _takeWhile.apply(this, arguments);
}

function _takeWhile() {
  _takeWhile = _wrapAsyncGenerator(function* (func, iterable) {
    let take = true;
    let c = 0;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;

    var _iteratorError;

    try {
      for (var _iterator = _asyncIterator(asyncIter(iterable)), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
        const item = _value;
        take = func(item, c++);

        if (take) {
          yield item;
        } else {
          break;
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          yield _awaitAsyncGenerator(_iterator.return());
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  });
  return _takeWhile.apply(this, arguments);
}

export default function curriedTakeWhile(func, iterable) {
  if (!iterable) {
    return iterable => takeWhile(func, iterable);
  }

  return takeWhile(func, iterable);
}