"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = curriedBatch;

var _awaitAsyncGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/awaitAsyncGenerator"));

var _wrapAsyncGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapAsyncGenerator"));

var _asyncIterator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncIterator"));

var _asyncIter = _interopRequireDefault(require("./async-iter"));

function batch(_x, _x2) {
  return _batch.apply(this, arguments);
}

function _batch() {
  _batch = (0, _wrapAsyncGenerator2.default)(function* (number, iterable) {
    let batch = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;

    var _iteratorError;

    try {
      for (var _iterator = (0, _asyncIterator2.default)((0, _asyncIter.default)(iterable)), _step, _value; _step = yield (0, _awaitAsyncGenerator2.default)(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield (0, _awaitAsyncGenerator2.default)(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
        const item = _value;
        batch.push(item);

        if (batch.length === number) {
          yield batch;
          batch = [];
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          yield (0, _awaitAsyncGenerator2.default)(_iterator.return());
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    if (batch.length) {
      yield batch;
    }
  });
  return _batch.apply(this, arguments);
}

function curriedBatch(number, iterable) {
  if (!iterable) {
    return iterable => batch(number, iterable);
  }

  return batch(number, iterable);
}

module.exports = exports["default"];