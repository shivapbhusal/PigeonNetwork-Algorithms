import _Promise from "@babel/runtime/core-js/promise";
import _Array$from from "@babel/runtime/core-js/array/from";
import _awaitAsyncGenerator from "@babel/runtime/helpers/awaitAsyncGenerator";
import _wrapAsyncGenerator from "@babel/runtime/helpers/wrapAsyncGenerator";
import range from './range';
import map from './map';
import asyncIter from './async-iter';
import Dequeue from 'dequeue';
export default function tee(iterable, number) {
  number = number || 2;
  iterable = asyncIter(iterable);

  const arrays = _Array$from(map(() => new Dequeue(), range(number)));

  let done = false;

  function fetch() {
    return new _Promise((resolve, reject) => {
      iterable.next().then(newItem => {
        if (newItem.done) {
          done = true;
          return resolve();
        } else {
          arrays.forEach(ar => ar.push(newItem.value));
          return resolve();
        }
      }).catch(err => reject(err));
    });
  }

  function teeGen(_x) {
    return _teeGen.apply(this, arguments);
  }

  function _teeGen() {
    _teeGen = _wrapAsyncGenerator(function* (a) {
      while (true) {
        if (a.length) {
          yield a.shift();
        } else if (done) {
          return;
        } else {
          yield _awaitAsyncGenerator(fetch());
        }
      }
    });
    return _teeGen.apply(this, arguments);
  }

  return arrays.map(a => teeGen(a));
}