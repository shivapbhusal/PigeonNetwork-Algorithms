import _Promise from "@babel/runtime/core-js/promise";
import _wrapAsyncGenerator from "@babel/runtime/helpers/wrapAsyncGenerator";
import _awaitAsyncGenerator from "@babel/runtime/helpers/awaitAsyncGenerator";
import _asyncGeneratorDelegate from "@babel/runtime/helpers/asyncGeneratorDelegate";
import _asyncIterator from "@babel/runtime/helpers/asyncIterator";
import asyncBatch from './async-batch';
import map from './map';

function asyncMapBatch(_x, _x2, _x3) {
  return _asyncMapBatch.apply(this, arguments);
}

function _asyncMapBatch() {
  _asyncMapBatch = _wrapAsyncGenerator(function* (number, func, iterable) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;

    var _iteratorError;

    try {
      for (var _iterator = _asyncIterator(asyncBatch(number, iterable)), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
        const items = _value;
        const results = yield _awaitAsyncGenerator(_Promise.all(map(func, items)));
        yield* _asyncGeneratorDelegate(_asyncIterator(results), _awaitAsyncGenerator);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          yield _awaitAsyncGenerator(_iterator.return());
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  });
  return _asyncMapBatch.apply(this, arguments);
}

export default function curriedAsyncMapBatch(number, func, iterable) {
  if (!iterable) {
    return iterable => asyncMapBatch(number, func, iterable);
  }

  return asyncMapBatch(number, func, iterable);
}