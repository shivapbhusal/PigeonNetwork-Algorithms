import _wrapAsyncGenerator from "@babel/runtime/helpers/wrapAsyncGenerator";
import _awaitAsyncGenerator from "@babel/runtime/helpers/awaitAsyncGenerator";
import _asyncGeneratorDelegate from "@babel/runtime/helpers/asyncGeneratorDelegate";
import _asyncIterator from "@babel/runtime/helpers/asyncIterator";
import map from './async-map';

function flatMap(_x, _x2) {
  return _flatMap.apply(this, arguments);
}

function _flatMap() {
  _flatMap = _wrapAsyncGenerator(function* (func, iterable) {
    const mapIter = map(func);
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;

    var _iteratorError;

    try {
      for (var _iterator = _asyncIterator(mapIter(iterable)), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
        const item = _value;
        yield* _asyncGeneratorDelegate(_asyncIterator(item), _awaitAsyncGenerator);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          yield _awaitAsyncGenerator(_iterator.return());
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  });
  return _flatMap.apply(this, arguments);
}

export default function curriedFlatMap(func, iterable) {
  if (!iterable) {
    return iterable => flatMap(func, iterable);
  }

  return flatMap(func, iterable);
}