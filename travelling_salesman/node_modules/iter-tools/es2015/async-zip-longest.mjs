import _Promise from "@babel/runtime/core-js/promise";
import _awaitAsyncGenerator from "@babel/runtime/helpers/awaitAsyncGenerator";
import _wrapAsyncGenerator from "@babel/runtime/helpers/wrapAsyncGenerator";
import asyncIter from './async-iter';
export default function zipLongest(_x) {
  return _zipLongest.apply(this, arguments);
}

function _zipLongest() {
  _zipLongest = _wrapAsyncGenerator(function* (filler) {
    const iters = Array.prototype.slice.call(arguments, 1).map(arg => asyncIter(arg));

    while (true) {
      const results = yield _awaitAsyncGenerator(_Promise.all(iters.map(iter => iter.next())));
      const done = results.every(r => r.done);
      if (done) return;
      yield results.map(r => r.done ? filler : r.value);
    }
  });
  return _zipLongest.apply(this, arguments);
}