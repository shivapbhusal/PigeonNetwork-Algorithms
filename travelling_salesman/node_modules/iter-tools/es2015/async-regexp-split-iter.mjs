import _wrapAsyncGenerator from "@babel/runtime/helpers/wrapAsyncGenerator";
import _awaitAsyncGenerator from "@babel/runtime/helpers/awaitAsyncGenerator";
import _asyncGeneratorDelegate from "@babel/runtime/helpers/asyncGeneratorDelegate";
import _asyncIterator from "@babel/runtime/helpers/asyncIterator";
import regexSplit from './regexp-split';

function regexpSplitIter(_x, _x2) {
  return _regexpSplitIter.apply(this, arguments);
}

function _regexpSplitIter() {
  _regexpSplitIter = _wrapAsyncGenerator(function* (re, iterable) {
    let buffer = '';
    let queue;
    let mergeEmpty = false;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;

    var _iteratorError;

    try {
      for (var _iterator = _asyncIterator(iterable), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
        const chunk = _value;
        if (chunk === '') continue;
        queue = [];
        buffer += chunk;

        for (const strIter of regexSplit(re, buffer)) {
          if (mergeEmpty && strIter === '') {
            mergeEmpty = false;
            continue;
          }

          mergeEmpty = false;
          queue.push(strIter);

          if (queue.length === 2) {
            yield queue.shift();
          }
        }

        mergeEmpty = queue[queue.length - 1] === '';
        buffer = queue.join('');
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          yield _awaitAsyncGenerator(_iterator.return());
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    if (queue && queue.length) {
      yield* _asyncGeneratorDelegate(_asyncIterator(queue), _awaitAsyncGenerator);
    }
  });
  return _regexpSplitIter.apply(this, arguments);
}

export default function curriedRegexpSplitIter(re, iterable) {
  if (typeof iterable === 'undefined') {
    return iterable => regexpSplitIter(re, iterable);
  }

  return regexpSplitIter(re, iterable);
}