import _awaitAsyncGenerator from "@babel/runtime/helpers/awaitAsyncGenerator";
import _wrapAsyncGenerator from "@babel/runtime/helpers/wrapAsyncGenerator";
import _asyncIterator from "@babel/runtime/helpers/asyncIterator";
import asyncIter from './async-iter';

function batch(_x, _x2) {
  return _batch.apply(this, arguments);
}

function _batch() {
  _batch = _wrapAsyncGenerator(function* (number, iterable) {
    let batch = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;

    var _iteratorError;

    try {
      for (var _iterator = _asyncIterator(asyncIter(iterable)), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
        const item = _value;
        batch.push(item);

        if (batch.length === number) {
          yield batch;
          batch = [];
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          yield _awaitAsyncGenerator(_iterator.return());
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    if (batch.length) {
      yield batch;
    }
  });
  return _batch.apply(this, arguments);
}

export default function curriedBatch(number, iterable) {
  if (!iterable) {
    return iterable => batch(number, iterable);
  }

  return batch(number, iterable);
}