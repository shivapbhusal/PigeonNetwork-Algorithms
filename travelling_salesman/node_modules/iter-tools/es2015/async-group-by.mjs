import _awaitAsyncGenerator from "@babel/runtime/helpers/awaitAsyncGenerator";
import _wrapAsyncGenerator from "@babel/runtime/helpers/wrapAsyncGenerator";
import asyncIter from './async-iter';

function groupBy(_x, _x2) {
  return _groupBy.apply(this, arguments);
}

function _groupBy() {
  _groupBy = _wrapAsyncGenerator(function* (key, iterable) {
    key = key || function (key) {
      return key;
    };

    iterable = asyncIter(iterable);
    let currentItem;
    let currentKey, previousKey;

    function group() {
      return _group.apply(this, arguments);
    }

    function _group() {
      _group = _wrapAsyncGenerator(function* () {
        while (true) {
          yield currentItem.value;
          currentItem = yield _awaitAsyncGenerator(iterable.next());
          if (currentItem.done) return;
          currentKey = key(currentItem.value);

          if (previousKey !== currentKey) {
            return;
          }
        }
      });
      return _group.apply(this, arguments);
    }

    ;
    currentItem = yield _awaitAsyncGenerator(iterable.next());

    while (true) {
      if (currentItem.done) return;
      currentKey = key(currentItem.value);

      if (previousKey !== currentKey) {
        previousKey = currentKey;
        yield [currentKey, group()];
      } else {
        currentItem = yield _awaitAsyncGenerator(iterable.next());
      }
    }
  });
  return _groupBy.apply(this, arguments);
}

export default function curriedGroupBy(key, iterable) {
  if (typeof iterable === 'undefined') {
    return iterable => groupBy(key, iterable);
  }

  return groupBy(key, iterable);
}