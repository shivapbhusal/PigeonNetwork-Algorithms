import _asyncIterator from "@babel/runtime/helpers/asyncIterator";
import asyncIter from './async-iter';

async function find(func, iterable) {
  let c = 0;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;

  var _iteratorError;

  try {
    for (var _iterator = _asyncIterator(asyncIter(iterable)), _step, _value; _step = await _iterator.next(), _iteratorNormalCompletion = _step.done, _value = await _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
      const item = _value;

      if (func(item, c++)) {
        return item;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        await _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return null;
}

export default function curriedFind(func, iterable) {
  if (!iterable) {
    return iterable => find(func, iterable);
  }

  return find(func, iterable);
}