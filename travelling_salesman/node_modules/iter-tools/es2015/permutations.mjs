import _Set from "@babel/runtime/core-js/set";
import _Array$from from "@babel/runtime/core-js/array/from";
import iter from './iter';
import map from './map';
import range from './range';
import tee from './tee';
import product from './product';
export default function* permutations(iterable, r) {
  const arr = _Array$from(iter(iterable));

  const mapToIndex = map(function (i) {
    return arr[i];
  });
  const n = arr.length;
  r = typeof r === 'undefined' ? n : r;
  if (r > n) return;

  for (const indices of product(...tee(range(n), r))) {
    if (new _Set(indices).size === r) {
      yield _Array$from(mapToIndex(indices));
    }
  }
}