import _Promise from "@babel/runtime/core-js/promise";
import _awaitAsyncGenerator from "@babel/runtime/helpers/awaitAsyncGenerator";
import _wrapAsyncGenerator from "@babel/runtime/helpers/wrapAsyncGenerator";
import _asyncIterator from "@babel/runtime/helpers/asyncIterator";
import asyncIter from './async-iter';

function delay(ms) {
  if (ms <= 0) return _Promise.resolve();
  return new _Promise(resolve => setTimeout(resolve, ms));
}

function asyncThrottle(_x, _x2) {
  return _asyncThrottle.apply(this, arguments);
}

function _asyncThrottle() {
  _asyncThrottle = _wrapAsyncGenerator(function* (ms, iterable) {
    let waitSince = 0;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;

    var _iteratorError;

    try {
      for (var _iterator = _asyncIterator(asyncIter(iterable)), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
        const item = _value;
        yield _awaitAsyncGenerator(delay(ms - (Date.now() - waitSince)));
        waitSince = Date.now();
        yield item;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          yield _awaitAsyncGenerator(_iterator.return());
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  });
  return _asyncThrottle.apply(this, arguments);
}

export default function curriedAsyncThrottle(ms, iterable) {
  if (!iterable) {
    return iterable => asyncThrottle(ms, iterable);
  }

  return asyncThrottle(ms, iterable);
}