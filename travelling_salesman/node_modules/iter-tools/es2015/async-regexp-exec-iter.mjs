import _wrapAsyncGenerator from "@babel/runtime/helpers/wrapAsyncGenerator";
import _awaitAsyncGenerator from "@babel/runtime/helpers/awaitAsyncGenerator";
import _asyncGeneratorDelegate from "@babel/runtime/helpers/asyncGeneratorDelegate";
import _asyncIterator from "@babel/runtime/helpers/asyncIterator";
import regexExec from './regexp-exec';

function regexpExecIter(_x, _x2) {
  return _regexpExecIter.apply(this, arguments);
}

function _regexpExecIter() {
  _regexpExecIter = _wrapAsyncGenerator(function* (re, iterable) {
    let matches;
    let buffer = '';
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;

    var _iteratorError;

    try {
      for (var _iterator = _asyncIterator(iterable), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
        const chunk = _value;
        if (chunk === '') continue;
        let lastIndex = 0;
        matches = [];
        buffer += chunk;

        for (const match of regexExec(re, buffer)) {
          if (match[0] === '') {
            continue;
          }

          lastIndex = re.lastIndex - match[0].length;
          matches.push(match);

          if (matches.length === 2) {
            yield matches.shift();
          }
        }

        buffer = buffer.slice(lastIndex);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          yield _awaitAsyncGenerator(_iterator.return());
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    if (matches && matches.length) {
      yield* _asyncGeneratorDelegate(_asyncIterator(matches), _awaitAsyncGenerator);
    }
  });
  return _regexpExecIter.apply(this, arguments);
}

export default function curriedRegexpExecIter(re, iterable) {
  if (typeof iterable === 'undefined') {
    return iterable => regexpExecIter(re, iterable);
  }

  return regexpExecIter(re, iterable);
}