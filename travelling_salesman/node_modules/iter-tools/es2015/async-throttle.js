"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = curriedAsyncThrottle;

var _promise = _interopRequireDefault(require("@babel/runtime/core-js/promise"));

var _awaitAsyncGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/awaitAsyncGenerator"));

var _wrapAsyncGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapAsyncGenerator"));

var _asyncIterator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncIterator"));

var _asyncIter = _interopRequireDefault(require("./async-iter"));

function delay(ms) {
  if (ms <= 0) return _promise.default.resolve();
  return new _promise.default(resolve => setTimeout(resolve, ms));
}

function asyncThrottle(_x, _x2) {
  return _asyncThrottle.apply(this, arguments);
}

function _asyncThrottle() {
  _asyncThrottle = (0, _wrapAsyncGenerator2.default)(function* (ms, iterable) {
    let waitSince = 0;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;

    var _iteratorError;

    try {
      for (var _iterator = (0, _asyncIterator2.default)((0, _asyncIter.default)(iterable)), _step, _value; _step = yield (0, _awaitAsyncGenerator2.default)(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield (0, _awaitAsyncGenerator2.default)(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
        const item = _value;
        yield (0, _awaitAsyncGenerator2.default)(delay(ms - (Date.now() - waitSince)));
        waitSince = Date.now();
        yield item;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          yield (0, _awaitAsyncGenerator2.default)(_iterator.return());
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  });
  return _asyncThrottle.apply(this, arguments);
}

function curriedAsyncThrottle(ms, iterable) {
  if (!iterable) {
    return iterable => asyncThrottle(ms, iterable);
  }

  return asyncThrottle(ms, iterable);
}

module.exports = exports["default"];