import _awaitAsyncGenerator from "@babel/runtime/helpers/awaitAsyncGenerator";
import _wrapAsyncGenerator from "@babel/runtime/helpers/wrapAsyncGenerator";
import _asyncIterator from "@babel/runtime/helpers/asyncIterator";
import asyncIter from './async-iter';

function slice(_x, _x2) {
  return _slice.apply(this, arguments);
}

function _slice() {
  _slice = _wrapAsyncGenerator(function* (opts, iterable) {
    let start, step, end;
    opts = typeof opts === 'number' ? {
      end: opts,
      start: 0
    } : opts;
    step = typeof opts.step === 'undefined' ? 1 : opts.step;
    end = typeof opts.end === 'undefined' ? step > 0 ? Infinity : -Infinity : opts.end;
    start = opts.start ? opts.start : 0;
    let currentPos = 0;
    let nextValidPos = start;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;

    var _iteratorError;

    try {
      for (var _iterator = _asyncIterator(asyncIter(iterable)), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
        const item = _value;

        if (currentPos >= end) {
          break;
        }

        if (nextValidPos === currentPos) {
          yield item;
          nextValidPos += step;
        }

        currentPos++;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          yield _awaitAsyncGenerator(_iterator.return());
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  });
  return _slice.apply(this, arguments);
}

export default function curriedSlice(opts, iterable) {
  if (!iterable) {
    return iterable => slice(opts, iterable);
  }

  return slice(opts, iterable);
}