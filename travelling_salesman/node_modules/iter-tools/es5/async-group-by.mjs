import _regeneratorRuntime from "@babel/runtime/regenerator";
import _awaitAsyncGenerator from "@babel/runtime/helpers/awaitAsyncGenerator";
import _wrapAsyncGenerator from "@babel/runtime/helpers/wrapAsyncGenerator";
import asyncIter from './async-iter';

function groupBy(_x, _x2) {
  return _groupBy.apply(this, arguments);
}

function _groupBy() {
  _groupBy = _wrapAsyncGenerator(
  /*#__PURE__*/
  _regeneratorRuntime.mark(function _callee2(key, iterable) {
    var currentItem, currentKey, previousKey, group, _group;

    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _group = function _ref2() {
              _group = _wrapAsyncGenerator(
              /*#__PURE__*/
              _regeneratorRuntime.mark(function _callee() {
                return _regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        if (!true) {
                          _context.next = 13;
                          break;
                        }

                        _context.next = 3;
                        return currentItem.value;

                      case 3:
                        _context.next = 5;
                        return _awaitAsyncGenerator(iterable.next());

                      case 5:
                        currentItem = _context.sent;

                        if (!currentItem.done) {
                          _context.next = 8;
                          break;
                        }

                        return _context.abrupt("return");

                      case 8:
                        currentKey = key(currentItem.value);

                        if (!(previousKey !== currentKey)) {
                          _context.next = 11;
                          break;
                        }

                        return _context.abrupt("return");

                      case 11:
                        _context.next = 0;
                        break;

                      case 13:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee, this);
              }));
              return _group.apply(this, arguments);
            };

            group = function _ref() {
              return _group.apply(this, arguments);
            };

            key = key || function (key) {
              return key;
            };

            iterable = asyncIter(iterable);
            ;
            _context2.next = 7;
            return _awaitAsyncGenerator(iterable.next());

          case 7:
            currentItem = _context2.sent;

          case 8:
            if (!true) {
              _context2.next = 23;
              break;
            }

            if (!currentItem.done) {
              _context2.next = 11;
              break;
            }

            return _context2.abrupt("return");

          case 11:
            currentKey = key(currentItem.value);

            if (!(previousKey !== currentKey)) {
              _context2.next = 18;
              break;
            }

            previousKey = currentKey;
            _context2.next = 16;
            return [currentKey, group()];

          case 16:
            _context2.next = 21;
            break;

          case 18:
            _context2.next = 20;
            return _awaitAsyncGenerator(iterable.next());

          case 20:
            currentItem = _context2.sent;

          case 21:
            _context2.next = 8;
            break;

          case 23:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));
  return _groupBy.apply(this, arguments);
}

export default function curriedGroupBy(key, iterable) {
  if (typeof iterable === 'undefined') {
    return function (iterable) {
      return groupBy(key, iterable);
    };
  }

  return groupBy(key, iterable);
}