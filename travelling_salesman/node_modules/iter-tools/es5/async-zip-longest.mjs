import _regeneratorRuntime from "@babel/runtime/regenerator";
import _Promise from "@babel/runtime/core-js/promise";
import _awaitAsyncGenerator from "@babel/runtime/helpers/awaitAsyncGenerator";
import _wrapAsyncGenerator from "@babel/runtime/helpers/wrapAsyncGenerator";
import asyncIter from './async-iter';
export default function zipLongest(_x) {
  return _zipLongest.apply(this, arguments);
}

function _zipLongest() {
  _zipLongest = _wrapAsyncGenerator(
  /*#__PURE__*/
  _regeneratorRuntime.mark(function _callee(filler) {
    var iters,
        results,
        done,
        _args = arguments;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            iters = Array.prototype.slice.call(_args, 1).map(function (arg) {
              return asyncIter(arg);
            });

          case 1:
            if (!true) {
              _context.next = 12;
              break;
            }

            _context.next = 4;
            return _awaitAsyncGenerator(_Promise.all(iters.map(function (iter) {
              return iter.next();
            })));

          case 4:
            results = _context.sent;
            done = results.every(function (r) {
              return r.done;
            });

            if (!done) {
              _context.next = 8;
              break;
            }

            return _context.abrupt("return");

          case 8:
            _context.next = 10;
            return results.map(function (r) {
              return r.done ? filler : r.value;
            });

          case 10:
            _context.next = 1;
            break;

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  return _zipLongest.apply(this, arguments);
}