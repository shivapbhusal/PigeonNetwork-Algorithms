import _regeneratorRuntime from "@babel/runtime/regenerator";
import _getIterator from "@babel/runtime/core-js/get-iterator";

var _marked =
/*#__PURE__*/
_regeneratorRuntime.mark(entries);

var emptyArr = [];
export default function entries(entriesable) {
  var key;
  return _regeneratorRuntime.wrap(function entries$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!(entriesable == null)) {
            _context.next = 4;
            break;
          }

          return _context.abrupt("return", _getIterator(emptyArr));

        case 4:
          if (!(typeof entriesable.entries === 'function')) {
            _context.next = 8;
            break;
          }

          return _context.delegateYield(entriesable.entries(), "t0", 6);

        case 6:
          _context.next = 17;
          break;

        case 8:
          if (!(typeof entriesable === 'object')) {
            _context.next = 17;
            break;
          }

          _context.t1 = _regeneratorRuntime.keys(entriesable);

        case 10:
          if ((_context.t2 = _context.t1()).done) {
            _context.next = 17;
            break;
          }

          key = _context.t2.value;

          if (!entriesable.hasOwnProperty(key)) {
            _context.next = 15;
            break;
          }

          _context.next = 15;
          return [key, entriesable[key]];

        case 15:
          _context.next = 10;
          break;

        case 17:
        case "end":
          return _context.stop();
      }
    }
  }, _marked, this);
}