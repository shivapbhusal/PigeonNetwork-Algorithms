import _regeneratorRuntime from "@babel/runtime/regenerator";
import _getIterator from "@babel/runtime/core-js/get-iterator";

var _marked =
/*#__PURE__*/
_regeneratorRuntime.mark(zipLongest);

import iter from './iter';
export default function zipLongest(filler) {
  var _len,
      args,
      _key,
      iters,
      numberOfExausted,
      zipped,
      _iterator,
      _isArray,
      _i,
      _ref,
      _iter,
      _iter$next,
      done,
      value,
      _args = arguments;

  return _regeneratorRuntime.wrap(function zipLongest$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          for (_len = _args.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = _args[_key];
          }

          iters = args.map(function (x) {
            return iter(x);
          });

        case 2:
          if (!true) {
            _context.next = 28;
            break;
          }

          numberOfExausted = 0;
          zipped = [];
          _iterator = iters, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);

        case 6:
          if (!_isArray) {
            _context.next = 12;
            break;
          }

          if (!(_i >= _iterator.length)) {
            _context.next = 9;
            break;
          }

          return _context.abrupt("break", 22);

        case 9:
          _ref = _iterator[_i++];
          _context.next = 16;
          break;

        case 12:
          _i = _iterator.next();

          if (!_i.done) {
            _context.next = 15;
            break;
          }

          return _context.abrupt("break", 22);

        case 15:
          _ref = _i.value;

        case 16:
          _iter = _ref;
          _iter$next = _iter.next(), done = _iter$next.done, value = _iter$next.value;

          if (done) {
            numberOfExausted++;
          }

          zipped.push(done ? filler : value);

        case 20:
          _context.next = 6;
          break;

        case 22:
          if (!(iters.length === numberOfExausted)) {
            _context.next = 24;
            break;
          }

          return _context.abrupt("return");

        case 24:
          _context.next = 26;
          return zipped;

        case 26:
          _context.next = 2;
          break;

        case 28:
        case "end":
          return _context.stop();
      }
    }
  }, _marked, this);
}