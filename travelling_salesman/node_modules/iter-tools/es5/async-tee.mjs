import _regeneratorRuntime from "@babel/runtime/regenerator";
import _Promise from "@babel/runtime/core-js/promise";
import _Array$from from "@babel/runtime/core-js/array/from";
import _awaitAsyncGenerator from "@babel/runtime/helpers/awaitAsyncGenerator";
import _wrapAsyncGenerator from "@babel/runtime/helpers/wrapAsyncGenerator";
import range from './range';
import map from './map';
import asyncIter from './async-iter';
import Dequeue from 'dequeue';
export default function tee(iterable, number) {
  number = number || 2;
  iterable = asyncIter(iterable);

  var arrays = _Array$from(map(function () {
    return new Dequeue();
  }, range(number)));

  var done = false;

  function fetch() {
    return new _Promise(function (resolve, reject) {
      iterable.next().then(function (newItem) {
        if (newItem.done) {
          done = true;
          return resolve();
        } else {
          arrays.forEach(function (ar) {
            return ar.push(newItem.value);
          });
          return resolve();
        }
      }).catch(function (err) {
        return reject(err);
      });
    });
  }

  function teeGen(_x) {
    return _teeGen.apply(this, arguments);
  }

  function _teeGen() {
    _teeGen = _wrapAsyncGenerator(
    /*#__PURE__*/
    _regeneratorRuntime.mark(function _callee(a) {
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!true) {
                _context.next = 14;
                break;
              }

              if (!a.length) {
                _context.next = 6;
                break;
              }

              _context.next = 4;
              return a.shift();

            case 4:
              _context.next = 12;
              break;

            case 6:
              if (!done) {
                _context.next = 10;
                break;
              }

              return _context.abrupt("return");

            case 10:
              _context.next = 12;
              return _awaitAsyncGenerator(fetch());

            case 12:
              _context.next = 0;
              break;

            case 14:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));
    return _teeGen.apply(this, arguments);
  }

  return arrays.map(function (a) {
    return teeGen(a);
  });
}