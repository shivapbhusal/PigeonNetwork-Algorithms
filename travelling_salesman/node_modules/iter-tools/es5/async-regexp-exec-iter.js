"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = curriedRegexpExecIter;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _getIterator2 = _interopRequireDefault(require("@babel/runtime/core-js/get-iterator"));

var _wrapAsyncGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapAsyncGenerator"));

var _awaitAsyncGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/awaitAsyncGenerator"));

var _asyncGeneratorDelegate2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncGeneratorDelegate"));

var _asyncIterator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncIterator"));

var _regexpExec = _interopRequireDefault(require("./regexp-exec"));

function regexpExecIter(_x, _x2) {
  return _regexpExecIter.apply(this, arguments);
}

function _regexpExecIter() {
  _regexpExecIter = (0, _wrapAsyncGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee(re, iterable) {
    var matches, buffer, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, chunk, lastIndex, _iterator2, _isArray, _i, _ref, match;

    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            buffer = '';
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _context.prev = 3;
            _iterator = (0, _asyncIterator2.default)(iterable);

          case 5:
            _context.next = 7;
            return (0, _awaitAsyncGenerator2.default)(_iterator.next());

          case 7:
            _step = _context.sent;
            _iteratorNormalCompletion = _step.done;
            _context.next = 11;
            return (0, _awaitAsyncGenerator2.default)(_step.value);

          case 11:
            _value = _context.sent;

            if (_iteratorNormalCompletion) {
              _context.next = 44;
              break;
            }

            chunk = _value;

            if (!(chunk === '')) {
              _context.next = 16;
              break;
            }

            return _context.abrupt("continue", 41);

          case 16:
            lastIndex = 0;
            matches = [];
            buffer += chunk;
            _iterator2 = (0, _regexpExec.default)(re, buffer), _isArray = Array.isArray(_iterator2), _i = 0, _iterator2 = _isArray ? _iterator2 : (0, _getIterator2.default)(_iterator2);

          case 20:
            if (!_isArray) {
              _context.next = 26;
              break;
            }

            if (!(_i >= _iterator2.length)) {
              _context.next = 23;
              break;
            }

            return _context.abrupt("break", 40);

          case 23:
            _ref = _iterator2[_i++];
            _context.next = 30;
            break;

          case 26:
            _i = _iterator2.next();

            if (!_i.done) {
              _context.next = 29;
              break;
            }

            return _context.abrupt("break", 40);

          case 29:
            _ref = _i.value;

          case 30:
            match = _ref;

            if (!(match[0] === '')) {
              _context.next = 33;
              break;
            }

            return _context.abrupt("continue", 38);

          case 33:
            lastIndex = re.lastIndex - match[0].length;
            matches.push(match);

            if (!(matches.length === 2)) {
              _context.next = 38;
              break;
            }

            _context.next = 38;
            return matches.shift();

          case 38:
            _context.next = 20;
            break;

          case 40:
            buffer = buffer.slice(lastIndex);

          case 41:
            _iteratorNormalCompletion = true;
            _context.next = 5;
            break;

          case 44:
            _context.next = 50;
            break;

          case 46:
            _context.prev = 46;
            _context.t0 = _context["catch"](3);
            _didIteratorError = true;
            _iteratorError = _context.t0;

          case 50:
            _context.prev = 50;
            _context.prev = 51;

            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {
              _context.next = 55;
              break;
            }

            _context.next = 55;
            return (0, _awaitAsyncGenerator2.default)(_iterator.return());

          case 55:
            _context.prev = 55;

            if (!_didIteratorError) {
              _context.next = 58;
              break;
            }

            throw _iteratorError;

          case 58:
            return _context.finish(55);

          case 59:
            return _context.finish(50);

          case 60:
            if (!(matches && matches.length)) {
              _context.next = 62;
              break;
            }

            return _context.delegateYield((0, _asyncGeneratorDelegate2.default)((0, _asyncIterator2.default)(matches), _awaitAsyncGenerator2.default), "t1", 62);

          case 62:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this, [[3, 46, 50, 60], [51,, 55, 59]]);
  }));
  return _regexpExecIter.apply(this, arguments);
}

function curriedRegexpExecIter(re, iterable) {
  if (typeof iterable === 'undefined') {
    return function (iterable) {
      return regexpExecIter(re, iterable);
    };
  }

  return regexpExecIter(re, iterable);
}

module.exports = exports["default"];