import _regeneratorRuntime from "@babel/runtime/regenerator";
import _getIterator from "@babel/runtime/core-js/get-iterator";
import _Array$from from "@babel/runtime/core-js/array/from";

var _marked =
/*#__PURE__*/
_regeneratorRuntime.mark(combinationsWithReplacement);

import map from './map';
import range from './range';
import product from './product';
import tee from './tee';
import iter from './iter';

function isSorted(arr) {
  if (arr.length < 2) return true;

  for (var i = 1; i < arr.length; i++) {
    if (arr[i - 1] > arr[i]) {
      return false;
    }
  }

  return true;
}

export default function combinationsWithReplacement(iterable, r) {
  var arr, mapToIndex, n, _iterator, _isArray, _i, _ref, indices;

  return _regeneratorRuntime.wrap(function combinationsWithReplacement$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          arr = _Array$from(iter(iterable));
          mapToIndex = map(function (i) {
            return arr[i];
          });
          n = arr.length;
          _iterator = product.apply(void 0, tee(range(n), r)), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);

        case 4:
          if (!_isArray) {
            _context.next = 10;
            break;
          }

          if (!(_i >= _iterator.length)) {
            _context.next = 7;
            break;
          }

          return _context.abrupt("break", 20);

        case 7:
          _ref = _iterator[_i++];
          _context.next = 14;
          break;

        case 10:
          _i = _iterator.next();

          if (!_i.done) {
            _context.next = 13;
            break;
          }

          return _context.abrupt("break", 20);

        case 13:
          _ref = _i.value;

        case 14:
          indices = _ref;

          if (!isSorted(indices)) {
            _context.next = 18;
            break;
          }

          _context.next = 18;
          return _Array$from(mapToIndex(indices));

        case 18:
          _context.next = 4;
          break;

        case 20:
        case "end":
          return _context.stop();
      }
    }
  }, _marked, this);
}