"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = curriedBatch;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _getIterator2 = _interopRequireDefault(require("@babel/runtime/core-js/get-iterator"));

var _iter = _interopRequireDefault(require("./iter"));

var _marked =
/*#__PURE__*/
_regenerator.default.mark(batch);

function batch(number, iterable) {
  var batch, _iterator, _isArray, _i, _ref, item;

  return _regenerator.default.wrap(function batch$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          batch = [];
          _iterator = (0, _iter.default)(iterable), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator2.default)(_iterator);

        case 2:
          if (!_isArray) {
            _context.next = 8;
            break;
          }

          if (!(_i >= _iterator.length)) {
            _context.next = 5;
            break;
          }

          return _context.abrupt("break", 20);

        case 5:
          _ref = _iterator[_i++];
          _context.next = 12;
          break;

        case 8:
          _i = _iterator.next();

          if (!_i.done) {
            _context.next = 11;
            break;
          }

          return _context.abrupt("break", 20);

        case 11:
          _ref = _i.value;

        case 12:
          item = _ref;
          batch.push(item);

          if (!(batch.length === number)) {
            _context.next = 18;
            break;
          }

          _context.next = 17;
          return batch;

        case 17:
          batch = [];

        case 18:
          _context.next = 2;
          break;

        case 20:
          if (!batch.length) {
            _context.next = 23;
            break;
          }

          _context.next = 23;
          return batch;

        case 23:
        case "end":
          return _context.stop();
      }
    }
  }, _marked, this);
}

function curriedBatch(number, iterable) {
  if (!iterable) {
    return function (iterable) {
      return batch(number, iterable);
    };
  }

  return batch(number, iterable);
}

module.exports = exports["default"];