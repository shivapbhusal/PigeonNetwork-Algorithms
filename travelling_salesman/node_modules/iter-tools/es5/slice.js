"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = curriedSlice;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _getIterator2 = _interopRequireDefault(require("@babel/runtime/core-js/get-iterator"));

var _iter = _interopRequireDefault(require("./iter"));

var _marked =
/*#__PURE__*/
_regenerator.default.mark(slice);

function slice(opts, iterable) {
  var start, step, end, currentPos, nextValidPos, _iterator, _isArray, _i, _ref, item;

  return _regenerator.default.wrap(function slice$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          opts = typeof opts === 'number' ? {
            end: opts,
            start: 0
          } : opts;
          step = typeof opts.step === 'undefined' ? 1 : opts.step;
          end = typeof opts.end === 'undefined' ? step > 0 ? Infinity : -Infinity : opts.end;
          start = opts.start ? opts.start : 0;
          currentPos = 0;
          nextValidPos = start;
          _iterator = (0, _iter.default)(iterable), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator2.default)(_iterator);

        case 7:
          if (!_isArray) {
            _context.next = 13;
            break;
          }

          if (!(_i >= _iterator.length)) {
            _context.next = 10;
            break;
          }

          return _context.abrupt("break", 27);

        case 10:
          _ref = _iterator[_i++];
          _context.next = 17;
          break;

        case 13:
          _i = _iterator.next();

          if (!_i.done) {
            _context.next = 16;
            break;
          }

          return _context.abrupt("break", 27);

        case 16:
          _ref = _i.value;

        case 17:
          item = _ref;

          if (!(currentPos >= end)) {
            _context.next = 20;
            break;
          }

          return _context.abrupt("break", 27);

        case 20:
          if (!(nextValidPos === currentPos)) {
            _context.next = 24;
            break;
          }

          _context.next = 23;
          return item;

        case 23:
          nextValidPos += step;

        case 24:
          currentPos++;

        case 25:
          _context.next = 7;
          break;

        case 27:
        case "end":
          return _context.stop();
      }
    }
  }, _marked, this);
}

function curriedSlice(opts, iterable) {
  if (!iterable) {
    return function (iterable) {
      return slice(opts, iterable);
    };
  }

  return slice(opts, iterable);
}

module.exports = exports["default"];