import _regeneratorRuntime from "@babel/runtime/regenerator";
import _awaitAsyncGenerator from "@babel/runtime/helpers/awaitAsyncGenerator";
import _wrapAsyncGenerator from "@babel/runtime/helpers/wrapAsyncGenerator";
export default function execute(_x) {
  return _execute.apply(this, arguments);
}

function _execute() {
  _execute = _wrapAsyncGenerator(
  /*#__PURE__*/
  _regeneratorRuntime.mark(function _callee(func) {
    var _len,
        args,
        _key,
        _args = arguments;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            for (_len = _args.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = _args[_key];
            }

          case 1:
            if (!true) {
              _context.next = 6;
              break;
            }

            _context.next = 4;
            return func.apply(void 0, args);

          case 4:
            _context.next = 1;
            break;

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  return _execute.apply(this, arguments);
}