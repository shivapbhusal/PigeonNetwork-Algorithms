import _regeneratorRuntime from "@babel/runtime/regenerator";
import _getIterator from "@babel/runtime/core-js/get-iterator";

var _marked =
/*#__PURE__*/
_regeneratorRuntime.mark(takeWhile);

import iter from './iter';

function takeWhile(func, i) {
  var take, c, _iterator, _isArray, _i, _ref, item;

  return _regeneratorRuntime.wrap(function takeWhile$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          take = true;
          c = 0;
          _iterator = iter(i), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);

        case 3:
          if (!_isArray) {
            _context.next = 9;
            break;
          }

          if (!(_i >= _iterator.length)) {
            _context.next = 6;
            break;
          }

          return _context.abrupt("break", 23);

        case 6:
          _ref = _iterator[_i++];
          _context.next = 13;
          break;

        case 9:
          _i = _iterator.next();

          if (!_i.done) {
            _context.next = 12;
            break;
          }

          return _context.abrupt("break", 23);

        case 12:
          _ref = _i.value;

        case 13:
          item = _ref;
          take = func(item, c++);

          if (!take) {
            _context.next = 20;
            break;
          }

          _context.next = 18;
          return item;

        case 18:
          _context.next = 21;
          break;

        case 20:
          return _context.abrupt("break", 23);

        case 21:
          _context.next = 3;
          break;

        case 23:
        case "end":
          return _context.stop();
      }
    }
  }, _marked, this);
}

export default function curriedTakeWhile(func, iterable) {
  if (!iterable) {
    return function (iterable) {
      return takeWhile(func, iterable);
    };
  }

  return takeWhile(func, iterable);
}