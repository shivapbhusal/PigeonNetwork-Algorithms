import _regeneratorRuntime from "@babel/runtime/regenerator";
import _Array$from from "@babel/runtime/core-js/array/from";
import range from './range';
import map from './map';
import iter from './iter';
import Dequeue from 'dequeue';
export default function tee(iterable, number) {
  var _marked =
  /*#__PURE__*/
  _regeneratorRuntime.mark(teeGen);

  number = number || 2;
  iterable = iter(iterable);

  var arrays = _Array$from(map(function () {
    return new Dequeue();
  }, range(number)));

  var done = false;

  function fetch() {
    var newItem = iterable.next();

    if (newItem.done) {
      done = true;
    } else {
      arrays.forEach(function (ar) {
        return ar.push(newItem.value);
      });
    }
  }

  function teeGen(a) {
    return _regeneratorRuntime.wrap(function teeGen$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!true) {
              _context.next = 13;
              break;
            }

            if (!a.length) {
              _context.next = 6;
              break;
            }

            _context.next = 4;
            return a.shift();

          case 4:
            _context.next = 11;
            break;

          case 6:
            if (!done) {
              _context.next = 10;
              break;
            }

            return _context.abrupt("return");

          case 10:
            fetch();

          case 11:
            _context.next = 0;
            break;

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _marked, this);
  }

  return arrays.map(function (a) {
    return teeGen(a);
  });
}