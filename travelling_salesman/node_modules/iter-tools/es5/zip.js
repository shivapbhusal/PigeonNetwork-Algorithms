"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = zip;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _getIterator2 = _interopRequireDefault(require("@babel/runtime/core-js/get-iterator"));

var _iter2 = _interopRequireDefault(require("./iter"));

var _marked =
/*#__PURE__*/
_regenerator.default.mark(zip);

function zip() {
  var _len,
      args,
      _key,
      iters,
      zipped,
      _iterator,
      _isArray,
      _i,
      _ref,
      _iter,
      _iter$next,
      done,
      value,
      _args = arguments;

  return _regenerator.default.wrap(function zip$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          for (_len = _args.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = _args[_key];
          }

          iters = args.map(function (x) {
            return (0, _iter2.default)(x);
          });

        case 2:
          if (!true) {
            _context.next = 26;
            break;
          }

          zipped = [];
          _iterator = iters, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator2.default)(_iterator);

        case 5:
          if (!_isArray) {
            _context.next = 11;
            break;
          }

          if (!(_i >= _iterator.length)) {
            _context.next = 8;
            break;
          }

          return _context.abrupt("break", 22);

        case 8:
          _ref = _iterator[_i++];
          _context.next = 15;
          break;

        case 11:
          _i = _iterator.next();

          if (!_i.done) {
            _context.next = 14;
            break;
          }

          return _context.abrupt("break", 22);

        case 14:
          _ref = _i.value;

        case 15:
          _iter = _ref;
          _iter$next = _iter.next(), done = _iter$next.done, value = _iter$next.value;

          if (!done) {
            _context.next = 19;
            break;
          }

          return _context.abrupt("return");

        case 19:
          zipped.push(value);

        case 20:
          _context.next = 5;
          break;

        case 22:
          _context.next = 24;
          return zipped;

        case 24:
          _context.next = 2;
          break;

        case 26:
        case "end":
          return _context.stop();
      }
    }
  }, _marked, this);
}

module.exports = exports["default"];