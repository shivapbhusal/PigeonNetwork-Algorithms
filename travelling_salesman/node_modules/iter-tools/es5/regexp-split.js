"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = regexpSplit;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _cloneRegexp = _interopRequireDefault(require("clone-regexp"));

function regexpSplit(re, str) {
  var _marked =
  /*#__PURE__*/
  _regenerator.default.mark(iter);

  if (re && typeof re === 'string') {
    re = new RegExp(re, 'g');
  }

  if (re && !re.global) {
    re = (0, _cloneRegexp.default)(re, {
      global: true
    });
  }

  function iter(str) {
    var i, match;
    return _regenerator.default.wrap(function iter$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (re) {
              _context.next = 3;
              break;
            }

            return _context.delegateYield(str, "t0", 2);

          case 2:
            return _context.abrupt("return");

          case 3:
            i = 0;

          case 4:
            if (!(match = re.exec(str))) {
              _context.next = 12;
              break;
            }

            _context.next = 7;
            return str.slice(i, re.lastIndex - match[0].length);

          case 7:
            if (re.global) {
              _context.next = 9;
              break;
            }

            return _context.abrupt("break", 12);

          case 9:
            i = re.lastIndex;
            _context.next = 4;
            break;

          case 12:
            _context.next = 14;
            return str.slice(i);

          case 14:
          case "end":
            return _context.stop();
        }
      }
    }, _marked, this);
  }

  if (typeof str === 'undefined') {
    return iter;
  }

  return iter(str);
}

module.exports = exports["default"];