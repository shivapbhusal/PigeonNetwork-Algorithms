import _regeneratorRuntime from "@babel/runtime/regenerator";
import _Set from "@babel/runtime/core-js/set";
import _getIterator from "@babel/runtime/core-js/get-iterator";
import _Array$from from "@babel/runtime/core-js/array/from";

var _marked =
/*#__PURE__*/
_regeneratorRuntime.mark(permutations);

import iter from './iter';
import map from './map';
import range from './range';
import tee from './tee';
import product from './product';
export default function permutations(iterable, r) {
  var arr, mapToIndex, n, _iterator, _isArray, _i, _ref, indices;

  return _regeneratorRuntime.wrap(function permutations$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          arr = _Array$from(iter(iterable));
          mapToIndex = map(function (i) {
            return arr[i];
          });
          n = arr.length;
          r = typeof r === 'undefined' ? n : r;

          if (!(r > n)) {
            _context.next = 6;
            break;
          }

          return _context.abrupt("return");

        case 6:
          _iterator = product.apply(void 0, tee(range(n), r)), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);

        case 7:
          if (!_isArray) {
            _context.next = 13;
            break;
          }

          if (!(_i >= _iterator.length)) {
            _context.next = 10;
            break;
          }

          return _context.abrupt("break", 23);

        case 10:
          _ref = _iterator[_i++];
          _context.next = 17;
          break;

        case 13:
          _i = _iterator.next();

          if (!_i.done) {
            _context.next = 16;
            break;
          }

          return _context.abrupt("break", 23);

        case 16:
          _ref = _i.value;

        case 17:
          indices = _ref;

          if (!(new _Set(indices).size === r)) {
            _context.next = 21;
            break;
          }

          _context.next = 21;
          return _Array$from(mapToIndex(indices));

        case 21:
          _context.next = 7;
          break;

        case 23:
        case "end":
          return _context.stop();
      }
    }
  }, _marked, this);
}