"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = curriedRegexpExecIter;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _getIterator2 = _interopRequireDefault(require("@babel/runtime/core-js/get-iterator"));

var _regexpExec = _interopRequireDefault(require("./regexp-exec"));

var _marked =
/*#__PURE__*/
_regenerator.default.mark(regexpExecIter);

function regexpExecIter(re, iterable) {
  var matches, buffer, _iterator, _isArray, _i, _ref, chunk, lastIndex, _iterator2, _isArray2, _i2, _ref2, match;

  return _regenerator.default.wrap(function regexpExecIter$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          buffer = '';
          _iterator = iterable, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator2.default)(_iterator);

        case 2:
          if (!_isArray) {
            _context.next = 8;
            break;
          }

          if (!(_i >= _iterator.length)) {
            _context.next = 5;
            break;
          }

          return _context.abrupt("break", 42);

        case 5:
          _ref = _iterator[_i++];
          _context.next = 12;
          break;

        case 8:
          _i = _iterator.next();

          if (!_i.done) {
            _context.next = 11;
            break;
          }

          return _context.abrupt("break", 42);

        case 11:
          _ref = _i.value;

        case 12:
          chunk = _ref;

          if (!(chunk === '')) {
            _context.next = 15;
            break;
          }

          return _context.abrupt("continue", 40);

        case 15:
          lastIndex = 0;
          matches = [];
          buffer += chunk;
          _iterator2 = (0, _regexpExec.default)(re, buffer), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator2.default)(_iterator2);

        case 19:
          if (!_isArray2) {
            _context.next = 25;
            break;
          }

          if (!(_i2 >= _iterator2.length)) {
            _context.next = 22;
            break;
          }

          return _context.abrupt("break", 39);

        case 22:
          _ref2 = _iterator2[_i2++];
          _context.next = 29;
          break;

        case 25:
          _i2 = _iterator2.next();

          if (!_i2.done) {
            _context.next = 28;
            break;
          }

          return _context.abrupt("break", 39);

        case 28:
          _ref2 = _i2.value;

        case 29:
          match = _ref2;

          if (!(match[0] === '')) {
            _context.next = 32;
            break;
          }

          return _context.abrupt("continue", 37);

        case 32:
          lastIndex = re.lastIndex - match[0].length;
          matches.push(match);

          if (!(matches.length === 2)) {
            _context.next = 37;
            break;
          }

          _context.next = 37;
          return matches.shift();

        case 37:
          _context.next = 19;
          break;

        case 39:
          buffer = buffer.slice(lastIndex);

        case 40:
          _context.next = 2;
          break;

        case 42:
          if (!(matches && matches.length)) {
            _context.next = 44;
            break;
          }

          return _context.delegateYield(matches, "t0", 44);

        case 44:
        case "end":
          return _context.stop();
      }
    }
  }, _marked, this);
}

function curriedRegexpExecIter(re, iterable) {
  if (typeof iterable === 'undefined') {
    return function (iterable) {
      return regexpExecIter(re, iterable);
    };
  }

  return regexpExecIter(re, iterable);
}

module.exports = exports["default"];