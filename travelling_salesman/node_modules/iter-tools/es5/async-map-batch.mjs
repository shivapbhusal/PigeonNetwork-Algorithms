import _regeneratorRuntime from "@babel/runtime/regenerator";
import _Promise from "@babel/runtime/core-js/promise";
import _wrapAsyncGenerator from "@babel/runtime/helpers/wrapAsyncGenerator";
import _awaitAsyncGenerator from "@babel/runtime/helpers/awaitAsyncGenerator";
import _asyncGeneratorDelegate from "@babel/runtime/helpers/asyncGeneratorDelegate";
import _asyncIterator from "@babel/runtime/helpers/asyncIterator";
import asyncBatch from './async-batch';
import map from './map';

function asyncMapBatch(_x, _x2, _x3) {
  return _asyncMapBatch.apply(this, arguments);
}

function _asyncMapBatch() {
  _asyncMapBatch = _wrapAsyncGenerator(
  /*#__PURE__*/
  _regeneratorRuntime.mark(function _callee(number, func, iterable) {
    var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, items, results;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _context.prev = 2;
            _iterator = _asyncIterator(asyncBatch(number, iterable));

          case 4:
            _context.next = 6;
            return _awaitAsyncGenerator(_iterator.next());

          case 6:
            _step = _context.sent;
            _iteratorNormalCompletion = _step.done;
            _context.next = 10;
            return _awaitAsyncGenerator(_step.value);

          case 10:
            _value = _context.sent;

            if (_iteratorNormalCompletion) {
              _context.next = 20;
              break;
            }

            items = _value;
            _context.next = 15;
            return _awaitAsyncGenerator(_Promise.all(map(func, items)));

          case 15:
            results = _context.sent;
            return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(results), _awaitAsyncGenerator), "t0", 17);

          case 17:
            _iteratorNormalCompletion = true;
            _context.next = 4;
            break;

          case 20:
            _context.next = 26;
            break;

          case 22:
            _context.prev = 22;
            _context.t1 = _context["catch"](2);
            _didIteratorError = true;
            _iteratorError = _context.t1;

          case 26:
            _context.prev = 26;
            _context.prev = 27;

            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {
              _context.next = 31;
              break;
            }

            _context.next = 31;
            return _awaitAsyncGenerator(_iterator.return());

          case 31:
            _context.prev = 31;

            if (!_didIteratorError) {
              _context.next = 34;
              break;
            }

            throw _iteratorError;

          case 34:
            return _context.finish(31);

          case 35:
            return _context.finish(26);

          case 36:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this, [[2, 22, 26, 36], [27,, 31, 35]]);
  }));
  return _asyncMapBatch.apply(this, arguments);
}

export default function curriedAsyncMapBatch(number, func, iterable) {
  if (!iterable) {
    return function (iterable) {
      return asyncMapBatch(number, func, iterable);
    };
  }

  return asyncMapBatch(number, func, iterable);
}