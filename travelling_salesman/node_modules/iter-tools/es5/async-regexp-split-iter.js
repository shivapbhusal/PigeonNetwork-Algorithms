"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = curriedRegexpSplitIter;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _getIterator2 = _interopRequireDefault(require("@babel/runtime/core-js/get-iterator"));

var _wrapAsyncGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapAsyncGenerator"));

var _awaitAsyncGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/awaitAsyncGenerator"));

var _asyncGeneratorDelegate2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncGeneratorDelegate"));

var _asyncIterator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncIterator"));

var _regexpSplit = _interopRequireDefault(require("./regexp-split"));

function regexpSplitIter(_x, _x2) {
  return _regexpSplitIter.apply(this, arguments);
}

function _regexpSplitIter() {
  _regexpSplitIter = (0, _wrapAsyncGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee(re, iterable) {
    var buffer, queue, mergeEmpty, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, chunk, _iterator2, _isArray, _i, _ref, strIter;

    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            buffer = '';
            mergeEmpty = false;
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _context.prev = 4;
            _iterator = (0, _asyncIterator2.default)(iterable);

          case 6:
            _context.next = 8;
            return (0, _awaitAsyncGenerator2.default)(_iterator.next());

          case 8:
            _step = _context.sent;
            _iteratorNormalCompletion = _step.done;
            _context.next = 12;
            return (0, _awaitAsyncGenerator2.default)(_step.value);

          case 12:
            _value = _context.sent;

            if (_iteratorNormalCompletion) {
              _context.next = 46;
              break;
            }

            chunk = _value;

            if (!(chunk === '')) {
              _context.next = 17;
              break;
            }

            return _context.abrupt("continue", 43);

          case 17:
            queue = [];
            buffer += chunk;
            _iterator2 = (0, _regexpSplit.default)(re, buffer), _isArray = Array.isArray(_iterator2), _i = 0, _iterator2 = _isArray ? _iterator2 : (0, _getIterator2.default)(_iterator2);

          case 20:
            if (!_isArray) {
              _context.next = 26;
              break;
            }

            if (!(_i >= _iterator2.length)) {
              _context.next = 23;
              break;
            }

            return _context.abrupt("break", 41);

          case 23:
            _ref = _iterator2[_i++];
            _context.next = 30;
            break;

          case 26:
            _i = _iterator2.next();

            if (!_i.done) {
              _context.next = 29;
              break;
            }

            return _context.abrupt("break", 41);

          case 29:
            _ref = _i.value;

          case 30:
            strIter = _ref;

            if (!(mergeEmpty && strIter === '')) {
              _context.next = 34;
              break;
            }

            mergeEmpty = false;
            return _context.abrupt("continue", 39);

          case 34:
            mergeEmpty = false;
            queue.push(strIter);

            if (!(queue.length === 2)) {
              _context.next = 39;
              break;
            }

            _context.next = 39;
            return queue.shift();

          case 39:
            _context.next = 20;
            break;

          case 41:
            mergeEmpty = queue[queue.length - 1] === '';
            buffer = queue.join('');

          case 43:
            _iteratorNormalCompletion = true;
            _context.next = 6;
            break;

          case 46:
            _context.next = 52;
            break;

          case 48:
            _context.prev = 48;
            _context.t0 = _context["catch"](4);
            _didIteratorError = true;
            _iteratorError = _context.t0;

          case 52:
            _context.prev = 52;
            _context.prev = 53;

            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {
              _context.next = 57;
              break;
            }

            _context.next = 57;
            return (0, _awaitAsyncGenerator2.default)(_iterator.return());

          case 57:
            _context.prev = 57;

            if (!_didIteratorError) {
              _context.next = 60;
              break;
            }

            throw _iteratorError;

          case 60:
            return _context.finish(57);

          case 61:
            return _context.finish(52);

          case 62:
            if (!(queue && queue.length)) {
              _context.next = 64;
              break;
            }

            return _context.delegateYield((0, _asyncGeneratorDelegate2.default)((0, _asyncIterator2.default)(queue), _awaitAsyncGenerator2.default), "t1", 64);

          case 64:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this, [[4, 48, 52, 62], [53,, 57, 61]]);
  }));
  return _regexpSplitIter.apply(this, arguments);
}

function curriedRegexpSplitIter(re, iterable) {
  if (typeof iterable === 'undefined') {
    return function (iterable) {
      return regexpSplitIter(re, iterable);
    };
  }

  return regexpSplitIter(re, iterable);
}

module.exports = exports["default"];