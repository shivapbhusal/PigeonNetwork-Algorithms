import _Symbol$iterator from "@babel/runtime/core-js/symbol/iterator";
import _getIterator from "@babel/runtime/core-js/get-iterator";
import entries from './entries';
var emptyArr = [];
export default function iter(iterable) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  if (iterable == null) {
    return _getIterator(emptyArr);
  } else if (iterable[_Symbol$iterator]) {
    return iterable[_Symbol$iterator].apply(iterable, args);
  } else if (typeof iterable === 'object') {
    return entries(iterable);
  } else if (typeof iterable === 'function') {
    return iter(iterable.apply(void 0, args));
  }

  throw new Error('The argument is not a generator, iterable, or object');
}