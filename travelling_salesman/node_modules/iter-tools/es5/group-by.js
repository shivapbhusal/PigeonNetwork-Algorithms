"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = curriedGroupBy;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _iter = _interopRequireDefault(require("./iter"));

var _marked2 =
/*#__PURE__*/
_regenerator.default.mark(groupBy);

function groupBy(key, iterable) {
  var _marked, currentItem, currentKey, previousKey, group;

  return _regenerator.default.wrap(function groupBy$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          group = function _ref() {
            return _regenerator.default.wrap(function group$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    if (!true) {
                      _context.next = 11;
                      break;
                    }

                    _context.next = 3;
                    return currentItem.value;

                  case 3:
                    currentItem = iterable.next();

                    if (!currentItem.done) {
                      _context.next = 6;
                      break;
                    }

                    return _context.abrupt("return");

                  case 6:
                    currentKey = key(currentItem.value);

                    if (!(previousKey !== currentKey)) {
                      _context.next = 9;
                      break;
                    }

                    return _context.abrupt("return");

                  case 9:
                    _context.next = 0;
                    break;

                  case 11:
                  case "end":
                    return _context.stop();
                }
              }
            }, _marked, this);
          };

          _marked =
          /*#__PURE__*/
          _regenerator.default.mark(group);

          key = key || function (key) {
            return key;
          };

          iterable = (0, _iter.default)(iterable);
          ;
          currentItem = iterable.next();

        case 6:
          if (!true) {
            _context2.next = 19;
            break;
          }

          if (!currentItem.done) {
            _context2.next = 9;
            break;
          }

          return _context2.abrupt("return");

        case 9:
          currentKey = key(currentItem.value);

          if (!(previousKey !== currentKey)) {
            _context2.next = 16;
            break;
          }

          previousKey = currentKey;
          _context2.next = 14;
          return [currentKey, group()];

        case 14:
          _context2.next = 17;
          break;

        case 16:
          currentItem = iterable.next();

        case 17:
          _context2.next = 6;
          break;

        case 19:
        case "end":
          return _context2.stop();
      }
    }
  }, _marked2, this);
}

function curriedGroupBy(key, iterable) {
  if (typeof iterable === 'undefined') {
    return function (iterable) {
      return groupBy(key, iterable);
    };
  }

  return groupBy(key, iterable);
}

module.exports = exports["default"];