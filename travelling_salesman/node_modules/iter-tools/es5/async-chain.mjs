import _regeneratorRuntime from "@babel/runtime/regenerator";
import _wrapAsyncGenerator from "@babel/runtime/helpers/wrapAsyncGenerator";
import _awaitAsyncGenerator from "@babel/runtime/helpers/awaitAsyncGenerator";
import _asyncIterator from "@babel/runtime/helpers/asyncIterator";
import _asyncGeneratorDelegate from "@babel/runtime/helpers/asyncGeneratorDelegate";
import asyncIter from './async-iter';
export default function chain() {
  return _chain.apply(this, arguments);
}

function _chain() {
  _chain = _wrapAsyncGenerator(
  /*#__PURE__*/
  _regeneratorRuntime.mark(function _callee() {
    var i,
        _args = arguments;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            i = 0;

          case 1:
            if (!(i < _args.length)) {
              _context.next = 6;
              break;
            }

            return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(asyncIter(i < 0 || _args.length <= i ? undefined : _args[i])), _awaitAsyncGenerator), "t0", 3);

          case 3:
            i++;
            _context.next = 1;
            break;

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  return _chain.apply(this, arguments);
}