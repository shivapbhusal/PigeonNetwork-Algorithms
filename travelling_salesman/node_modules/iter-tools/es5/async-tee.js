"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = tee;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _promise = _interopRequireDefault(require("@babel/runtime/core-js/promise"));

var _from = _interopRequireDefault(require("@babel/runtime/core-js/array/from"));

var _awaitAsyncGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/awaitAsyncGenerator"));

var _wrapAsyncGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapAsyncGenerator"));

var _range = _interopRequireDefault(require("./range"));

var _map = _interopRequireDefault(require("./map"));

var _asyncIter = _interopRequireDefault(require("./async-iter"));

var _dequeue = _interopRequireDefault(require("dequeue"));

function tee(iterable, number) {
  number = number || 2;
  iterable = (0, _asyncIter.default)(iterable);
  var arrays = (0, _from.default)((0, _map.default)(function () {
    return new _dequeue.default();
  }, (0, _range.default)(number)));
  var done = false;

  function fetch() {
    return new _promise.default(function (resolve, reject) {
      iterable.next().then(function (newItem) {
        if (newItem.done) {
          done = true;
          return resolve();
        } else {
          arrays.forEach(function (ar) {
            return ar.push(newItem.value);
          });
          return resolve();
        }
      }).catch(function (err) {
        return reject(err);
      });
    });
  }

  function teeGen(_x) {
    return _teeGen.apply(this, arguments);
  }

  function _teeGen() {
    _teeGen = (0, _wrapAsyncGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee(a) {
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!true) {
                _context.next = 14;
                break;
              }

              if (!a.length) {
                _context.next = 6;
                break;
              }

              _context.next = 4;
              return a.shift();

            case 4:
              _context.next = 12;
              break;

            case 6:
              if (!done) {
                _context.next = 10;
                break;
              }

              return _context.abrupt("return");

            case 10:
              _context.next = 12;
              return (0, _awaitAsyncGenerator2.default)(fetch());

            case 12:
              _context.next = 0;
              break;

            case 14:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));
    return _teeGen.apply(this, arguments);
  }

  return arrays.map(function (a) {
    return teeGen(a);
  });
}

module.exports = exports["default"];