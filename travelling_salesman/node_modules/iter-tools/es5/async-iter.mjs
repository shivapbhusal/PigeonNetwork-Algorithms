import _regeneratorRuntime from "@babel/runtime/regenerator";
import _Symbol from "@babel/runtime/core-js/symbol";
import _wrapAsyncGenerator from "@babel/runtime/helpers/wrapAsyncGenerator";
import _awaitAsyncGenerator from "@babel/runtime/helpers/awaitAsyncGenerator";
import _asyncIterator from "@babel/runtime/helpers/asyncIterator";
import _asyncGeneratorDelegate from "@babel/runtime/helpers/asyncGeneratorDelegate";
import iter from './iter';
export default function asyncIter(_x) {
  return _asyncIter.apply(this, arguments);
}

function _asyncIter() {
  _asyncIter = _wrapAsyncGenerator(
  /*#__PURE__*/
  _regeneratorRuntime.mark(function _callee(iterable) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(iterable && iterable[_Symbol.asyncIterator])) {
              _context.next = 4;
              break;
            }

            return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(iterable), _awaitAsyncGenerator), "t0", 2);

          case 2:
            _context.next = 5;
            break;

          case 4:
            return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(iter(iterable)), _awaitAsyncGenerator), "t1", 5);

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  return _asyncIter.apply(this, arguments);
}